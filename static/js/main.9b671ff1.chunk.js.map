{"version":3,"sources":["redux/actions.ts","components/post.component.tsx","redux/types.ts","pages/homepage.tsx","components/input-section.component.tsx","components/comment.component.tsx","components/comments-section.component.tsx","pages/post-page.tsx","pages/create-post-page.tsx","components/header.component.tsx","App.tsx","serviceWorker.ts","redux/post-reducer.ts","redux/store.ts","index.tsx"],"names":["useStyles","makeStyles","title","fontWeight","fontSize","buttonContainer","padding","Post","body","id","comments","styles","history","useHistory","dispatch","useDispatch","Card","variant","CardHeader","action","IconButton","onClick","type","payload","CardContent","Typography","noWrap","className","component","CardActions","Button","color","push","pathname","state","page","paddingTop","HomePage","posts","useSelector","useEffect","length","a","axios","get","data","forEach","item","Container","maxWidth","Grid","container","spacing","map","post","key","xs","sm","md","formControl","margin","display","inputField","input","comment","resize","fontFamily","InputSection","submitHandler","inputLabel","inputName","inputValue","textareaName","textareaValue","onChangeHandler","FormControl","InputLabel","Input","required","value","name","onChange","TextareaAutosize","cols","rows","startIcon","Send","size","card","marginTop","avatar","backgroundColor","blue","Comment","Avatar","author","toUpperCase","titleTypographyProps","content","CommentsSection","currentPost","find","useState","setComment","index","addComment","alert","event","target","article","header","justifyContent","alignItems","textarea","PostPage","useLocation","edit","setEdit","postData","setPostData","handleChange","TextField","fullWidth","defaultValue","prevEdit","CreatePostPage","postContent","setPostContent","toolbar","Header","AppBar","position","Toolbar","App","exact","path","to","Boolean","window","location","hostname","match","initialState","postReducer","modifiedPost","postIdToDelete","filter","newPost","persistConfig","storage","persistedReducer","persistReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9b671ff1.chunk.js","sourcesContent":["import {\r\n    ADD_COMMENT,\r\n    ADD_NEW_POST,\r\n    Comment_I,\r\n    DELETE_POST,\r\n    FETCH_POSTS,\r\n    Post_I,\r\n    PostActionTypes,\r\n    UPDATE_POST\r\n} from \"./types\";\r\nimport axios, {AxiosResponse} from \"axios\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\n\r\nexport function fetchPosts() {\r\n    return async (dispatch: ThunkDispatch<{}, {}, PostActionTypes>) => {\r\n        const data: AxiosResponse<Post_I[]> = await axios.get<Post_I[]>(\"https://bloggy-api.herokuapp.com/posts\");\r\n        data.data.forEach(item => {\r\n            item.comments = [];\r\n        });\r\n        dispatch(<const>{\r\n            type: FETCH_POSTS,\r\n            payload: data.data\r\n        });\r\n    }\r\n}\r\n\r\nexport const addComment = (post: Post_I, comment: Comment_I): PostActionTypes => (<const>{\r\n    type: ADD_COMMENT,\r\n    payload: {post, comment}\r\n});\r\n\r\nexport const deletePost = (postId: number): PostActionTypes => (<const>{\r\n    type: DELETE_POST,\r\n    payload: postId\r\n});\r\n\r\nexport const updatePost = (modifiedPost: Post_I): PostActionTypes => (<const>{\r\n    type: UPDATE_POST,\r\n    payload: modifiedPost\r\n});\r\n\r\nexport const addNewPost = (post: Post_I): PostActionTypes => (<const>{\r\n    type: ADD_NEW_POST,\r\n    payload: post\r\n});","import React from \"react\";\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n    CardActions,\r\n    Button,\r\n    IconButton,\r\n    makeStyles,\r\n    CardHeader\r\n} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport {Post_I} from \"../redux/types\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deletePost} from \"../redux/actions\";\r\n\r\nconst Post: React.FC<Post_I> = ({title, body, id, comments}: Post_I) => {\r\n\r\n    const styles = useStyles();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const handleCLick = () => {\r\n        history.push({\r\n            pathname: `/posts/${id}`,\r\n            state: {title, body, id, comments}\r\n        });\r\n    }\r\n\r\n    const handleDeletePost = () => {\r\n        dispatch(deletePost(id));\r\n    }\r\n\r\n    return (\r\n        <Card variant=\"outlined\">\r\n            <CardHeader action={\r\n                <IconButton onClick={handleDeletePost}>\r\n                    <CloseIcon/>\r\n                </IconButton>\r\n            }/>\r\n            <CardContent>\r\n                <Typography noWrap className={styles.title} variant=\"h2\">\r\n                    {title}\r\n                </Typography>\r\n                <Typography noWrap component=\"div\" variant=\"body2\">\r\n                    {body}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions className={styles.buttonContainer}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleCLick}>\r\n                    Learn more...\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    title: {\r\n        fontWeight: \"normal\",\r\n        fontSize: \"2.2rem\"\r\n    },\r\n\r\n    buttonContainer: {\r\n        padding: \"16px\"\r\n    },\r\n}));\r\n\r\nexport default Post;","export const FETCH_POSTS = \"FETCH_POSTS\";\r\nexport const DELETE_POST = \"DELETE_POST\";\r\nexport const UPDATE_POST = \"UPDATE_POST\";\r\nexport const ADD_COMMENT = \"ADD_COMMENT\";\r\nexport const ADD_NEW_POST = \"ADD_NEW_POST\";\r\n\r\nexport interface Comment_I {\r\n    author: string,\r\n    content: string\r\n}\r\n\r\nexport interface Post_I {\r\n    id: number,\r\n    title: string,\r\n    body: string,\r\n    comments: Comment_I[]\r\n}\r\n\r\nexport interface PostState_I {\r\n    posts: Post_I[]\r\n}\r\n\r\ninterface FetchPostsAction_I {\r\n    type: typeof FETCH_POSTS,\r\n    payload: Post_I[]\r\n}\r\n\r\ninterface UpdatePostAction_I {\r\n    type: typeof UPDATE_POST,\r\n    payload: Post_I\r\n}\r\n\r\ninterface DeletePostAction_I {\r\n    type: typeof DELETE_POST,\r\n    payload: number\r\n}\r\n\r\ninterface AddPostAction_I {\r\n    type: typeof ADD_NEW_POST,\r\n    payload: Post_I\r\n}\r\n\r\ninterface CommentsActions_I {\r\n    type: typeof ADD_COMMENT,\r\n    payload: { post: Post_I, comment: Comment_I }\r\n}\r\n\r\nexport type PostActionTypes =\r\n    FetchPostsAction_I |\r\n    UpdatePostAction_I |\r\n    CommentsActions_I |\r\n    DeletePostAction_I |\r\n    AddPostAction_I;","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Post_I, PostState_I} from \"../redux/types\";\r\nimport {fetchPosts} from \"../redux/actions\";\r\nimport Post from \"../components/post.component\";\r\nimport {Grid, makeStyles, Container} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    page: {\r\n        paddingTop: \"3rem\"\r\n    }\r\n}));\r\n\r\nconst HomePage: React.FC = () => {\r\n\r\n    const posts: Post_I[] = useSelector((state: PostState_I) => state.posts);\r\n    const dispatch = useDispatch();\r\n    const styles = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (!posts.length) {\r\n            dispatch(fetchPosts());\r\n        }\r\n    }, [posts, dispatch]);\r\n\r\n    return (\r\n        <Container maxWidth=\"xl\">\r\n            <Grid className={styles.page} container spacing={3}>\r\n                {\r\n                    posts.map(post => (\r\n                        <Grid key={post.id} item xs={12} sm={6} md={4}>\r\n                            <Post {...post}/>\r\n                        </Grid>\r\n                    ))\r\n                }\r\n            </Grid>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default HomePage;","import React from \"react\";\r\nimport {TextareaAutosize, makeStyles, FormControl, InputLabel, Input, Button} from \"@material-ui/core\";\r\nimport {Send} from \"@material-ui/icons\";\r\n\r\ntype InputProps = {\r\n    submitHandler: any,\r\n    inputLabel: string,\r\n    inputName: string,\r\n    inputValue: string,\r\n    textareaName: string,\r\n    textareaValue: string,\r\n    onChangeHandler: any\r\n}\r\n\r\nconst InputSection: React.FC<InputProps> =\r\n    ({\r\n         submitHandler, inputLabel, inputName, inputValue, textareaName, textareaValue, onChangeHandler\r\n     }: InputProps) => {\r\n\r\n        const styles = useStyles();\r\n\r\n        return (\r\n            <form>\r\n                <FormControl className={styles.formControl}>\r\n                    <InputLabel className={styles.inputField}>{inputLabel}</InputLabel>\r\n                    <Input\r\n                        required\r\n                        className={styles.input}\r\n                        value={inputValue}\r\n                        name={inputName}\r\n                        onChange={onChangeHandler}\r\n                    />\r\n                </FormControl>\r\n                <TextareaAutosize\r\n                    className={styles.comment}\r\n                    required\r\n                    cols={100}\r\n                    rows={15}\r\n                    value={textareaValue}\r\n                    name={textareaName}\r\n                    onChange={onChangeHandler}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<Send/>}\r\n                    size=\"large\"\r\n                    onClick={submitHandler}\r\n                >\r\n                    Post\r\n                </Button>\r\n            </form>\r\n        );\r\n    }\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    formControl: {\r\n        margin: \"2rem 0\",\r\n        display: \"block\"\r\n    },\r\n\r\n    inputField: {\r\n        fontSize: \"1.4rem\",\r\n    },\r\n\r\n    input: {\r\n        fontSize: \"1.6rem\"\r\n    },\r\n\r\n    comment: {\r\n        resize: \"none\",\r\n        padding: \"1rem\",\r\n        fontSize: \"1.6rem\",\r\n        fontFamily: \"Roboto\"\r\n    }\r\n}));\r\n\r\nexport default InputSection;","import React from \"react\";\r\nimport {Avatar, Card, CardContent, CardHeader, makeStyles} from \"@material-ui/core\";\r\nimport {Comment_I} from \"../redux/types\";\r\nimport {blue} from \"@material-ui/core/colors\";\r\n\r\nconst Comment: React.FC<{ comment: Comment_I}> = ({comment} : {comment: Comment_I}) => {\r\n\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <Card className={styles.card}>\r\n            <CardHeader\r\n                avatar={\r\n                    <Avatar color=\"primary\" className={styles.avatar}>\r\n                        {comment.author[0].toUpperCase()}\r\n                    </Avatar>\r\n                }\r\n                title={comment.author}\r\n                titleTypographyProps={{variant: \"h6\"}}\r\n            />\r\n            <CardContent>\r\n                {comment.content}\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    card: {\r\n        marginTop: \"1.5rem\"\r\n    },\r\n\r\n    avatar: {\r\n        backgroundColor: blue[700]\r\n    }\r\n}));\r\n\r\nexport default Comment;","import React, {useState} from \"react\";\r\nimport {Comment_I, Post_I, PostState_I} from \"../redux/types\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport InputSection from \"./input-section.component\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addComment} from \"../redux/actions\";\r\nimport Comment from \"./comment.component\";\r\n\r\ntype CurrentPost = {\r\n    currentPost: Post_I\r\n}\r\n\r\nconst CommentsSection: React.FC<CurrentPost> = ({currentPost}: CurrentPost) => {\r\n    const dispatch = useDispatch();\r\n    const comments: Comment_I[] = useSelector((state: PostState_I) => state.posts)\r\n        .find(post => post.id === currentPost.id)!.comments;\r\n\r\n    const [comment, setComment] = useState<Comment_I>({author: \"\", content: \"\"});\r\n\r\n    const handleChange = (event: React.FormEvent<EventTarget>) => {\r\n        const target = event.target as HTMLInputElement;\r\n        setComment({...comment, [target.name]: target.value});\r\n    }\r\n\r\n    const handleAddComment = () => {\r\n        if (comment.author.length && comment.content.length) {\r\n            dispatch(addComment(currentPost, comment));\r\n            setComment({author: \"\", content: \"\"});\r\n        } else\r\n            alert(\"Input fields cannot be empty. Try again, please.\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                comments.length\r\n                    ?\r\n                    comments.map((comment: Comment_I, index: number) => <Comment comment={comment} key={index}/>)\r\n                    :\r\n                    <Typography component=\"h2\" variant=\"h4\">\r\n                        There are no comments yet!\r\n                    </Typography>\r\n            }\r\n            <InputSection\r\n                submitHandler={handleAddComment}\r\n                inputLabel=\"Author\"\r\n                inputName=\"author\"\r\n                inputValue={comment.author}\r\n                textareaName=\"content\"\r\n                textareaValue={comment.content}\r\n                onChangeHandler={handleChange}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CommentsSection;","import React, {useState} from \"react\";\r\nimport {useLocation} from \"react-router-dom\";\r\nimport {Post_I} from \"../redux/types\";\r\nimport {Container, Typography, makeStyles, IconButton, TextField, TextareaAutosize} from \"@material-ui/core\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport CommentsSection from \"../components/comments-section.component\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updatePost} from \"../redux/actions\";\r\n\r\nconst PostPage: React.FC = () => {\r\n\r\n    const currentPost: Post_I = useLocation().state as Post_I;\r\n    const styles = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const [edit, setEdit] = useState<boolean>(false);\r\n    const [postData, setPostData] = useState<Post_I>(currentPost);\r\n\r\n    const handleEdit = () => {\r\n        if (edit) {\r\n            dispatch(updatePost(postData));\r\n        }\r\n        setEdit(prevEdit => !prevEdit);\r\n    }\r\n\r\n    const handleChange = (event: React.FormEvent<EventTarget>) => {\r\n        const target = event.target as HTMLInputElement;\r\n        setPostData({...postData, [target.name]: target.value});\r\n    }\r\n\r\n    return (\r\n        <Container className={styles.page}>\r\n            <Typography className={styles.header} component=\"h1\" variant=\"h2\">\r\n                {\r\n                    edit\r\n                        ?\r\n                        <TextField\r\n                            fullWidth\r\n                            defaultValue={currentPost.title}\r\n                            name=\"title\"\r\n                            value={postData.title}\r\n                            onChange={handleChange}\r\n                        />\r\n                        :\r\n                        postData.title\r\n                }\r\n                <IconButton onClick={handleEdit}>\r\n                    <EditIcon fontSize=\"large\" color=\"error\"/>\r\n                </IconButton>\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" className={styles.article}>\r\n                {\r\n                    edit\r\n                        ?\r\n                        <TextareaAutosize\r\n                            required\r\n                            cols={100}\r\n                            rows={15}\r\n                            defaultValue={currentPost.body}\r\n                            name=\"body\"\r\n                            value={postData.body}\r\n                            onChange={handleChange}\r\n                            className={styles.textarea}\r\n                        />\r\n                        :\r\n                        postData.body\r\n                }\r\n            </Typography>\r\n            <CommentsSection currentPost={postData}/>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    page: {\r\n        padding: \"1rem\"\r\n    },\r\n\r\n    article: {\r\n        fontSize: \"1.4rem\",\r\n        margin: \"2rem 0\"\r\n    },\r\n\r\n    header: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"baseline\"\r\n    },\r\n\r\n    textarea: {\r\n        resize: \"none\",\r\n        padding: \"1rem\",\r\n        fontFamily: \"Roboto\"\r\n    }\r\n}));\r\n\r\nexport default PostPage;","import React, {useState} from \"react\";\r\nimport InputSection from \"../components/input-section.component\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addNewPost} from \"../redux/actions\";\r\nimport {Post_I} from \"../redux/types\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {Container} from \"@material-ui/core\";\r\n\r\ntype PostInput = {\r\n    title: string,\r\n    body: string\r\n}\r\n\r\nconst CreatePostPage: React.FC = () => {\r\n\r\n    const [postContent, setPostContent] = useState<PostInput>({title: \"\", body: \"\"});\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const handleChange = (event: React.FormEvent<EventTarget>) => {\r\n        const target = event.target as HTMLInputElement;\r\n        setPostContent({...postContent, [target.name]: target.value});\r\n    }\r\n\r\n    const handleAddPost = () => {\r\n        if (postContent.body.length && postContent.title.length) {\r\n            dispatch(addNewPost(postContent as Post_I));\r\n            history.push(\"/\");\r\n        } else\r\n            alert(\"Input fields cannot be empty. Try again, please.\");\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <InputSection\r\n                submitHandler={handleAddPost}\r\n                inputLabel=\"Title\"\r\n                inputName=\"title\"\r\n                inputValue={postContent.title}\r\n                textareaName=\"body\"\r\n                textareaValue={postContent.body}\r\n                onChangeHandler={handleChange}\r\n            />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default CreatePostPage;","import React from \"react\";\r\nimport {AppBar, Toolbar, Button, Typography, makeStyles} from \"@material-ui/core\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nconst Header: React.FC = () => {\r\n\r\n    const history = useHistory();\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <AppBar position=\"sticky\">\r\n            <Toolbar className={styles.toolbar}>\r\n                <Button color=\"inherit\" onClick={() => history.push(\"/\")}>\r\n                    <Typography variant=\"h6\">\r\n                        Main\r\n                    </Typography>\r\n                </Button>\r\n                <Button color=\"inherit\" onClick={() => history.push(\"/posts/new\")}>\r\n                    <Typography variant=\"h6\">\r\n                        Add new post\r\n                    </Typography>\r\n                </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    toolbar: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\"\r\n    }\r\n}));\r\n\r\nexport default Header;","import React from 'react';\nimport {Switch, Route, Redirect} from \"react-router-dom\";\nimport \"./basic.styles.scss\";\nimport HomePage from \"./pages/homepage\";\nimport PostPage from \"./pages/post-page\";\nimport CreatePostPage from \"./pages/create-post-page\";\nimport Header from \"./components/header.component\";\n\nconst App: React.FC = () => {\n    return (\n        <>\n            <Header/>\n            <Switch>\n                <Route exact path=\"/\" component={HomePage}/>\n                <Route path=\"/posts/new\" component={CreatePostPage}/>\n                <Route path=\"/posts/:id\" component={PostPage}/>\n                <Route path=\"*\">\n                    <Redirect to=\"/\"/>\n                </Route>\n            </Switch>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    ADD_COMMENT,\r\n    ADD_NEW_POST,\r\n    Comment_I,\r\n    DELETE_POST,\r\n    FETCH_POSTS,\r\n    Post_I,\r\n    PostActionTypes,\r\n    PostState_I,\r\n    UPDATE_POST\r\n} from \"./types\";\r\n\r\nconst initialState: PostState_I = {\r\n    posts: []\r\n}\r\n\r\nfunction postReducer(state: PostState_I = initialState, action: PostActionTypes): PostState_I {\r\n    switch (action.type) {\r\n        case FETCH_POSTS:\r\n            return {\r\n                ...state,\r\n                posts: action.payload\r\n            };\r\n        case UPDATE_POST:\r\n            const modifiedPost: Post_I = action.payload;\r\n            return {\r\n                ...state,\r\n                posts: state.posts.map(post => post.id === modifiedPost.id ? modifiedPost : post)\r\n            };\r\n        case DELETE_POST:\r\n            const postIdToDelete: number = action.payload;\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(post => post.id !== postIdToDelete)\r\n            };\r\n        case ADD_COMMENT:\r\n            const {post, comment}: { post: Post_I, comment: Comment_I } = action.payload;\r\n            return {\r\n                ...state,\r\n                posts: state.posts.map(item => {\r\n                    if (item.id === post.id)\r\n                        item.comments.push(comment);\r\n                    return item;\r\n                })\r\n            };\r\n        case ADD_NEW_POST:\r\n            const newPost: Post_I = action.payload;\r\n            newPost.id = state.posts[state.posts.length - 1].id + 1;\r\n            newPost.comments = [];\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default postReducer;","import {applyMiddleware, createStore, Store} from \"redux\";\r\nimport postReducer from \"./post-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {persistStore, persistReducer} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport {PostState_I} from \"./types\";\r\n\r\nconst persistConfig = {\r\n    key: \"root\",\r\n    storage\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, postReducer);\r\n\r\nconst store: Store<PostState_I> = createStore(persistedReducer, applyMiddleware(thunk));\r\nconst persistor = persistStore(store);\r\n\r\nexport {store, persistor};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store, persistor} from \"./redux/store\";\nimport {PersistGate} from \"redux-persist/integration/react\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <PersistGate persistor={persistor}>\n                <Router>\n                    <App/>\n                </Router>\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}